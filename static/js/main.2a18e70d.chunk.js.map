{"version":3,"sources":["components/NavBar/Navbar.jsx","components/PokeList.jsx","components/helpers/PokemonTypes.js","components/Pokemon.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","getAllPokemon","url","a","Promise","resolve","reject","fetch","then","res","json","data","getPokemon","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Pokemon","pokemon","className","src","sprites","front_default","alt","name","types","map","type","style","backgroundColor","PokemonType","weight","height","abilities","ability","App","useState","setPokemon","nextUrl","setNextUrl","prevUrl","setPrevUrl","loading","setLoading","initialUrl","useEffect","response","next","previous","loadingPokemon","results","console","log","fetchData","Prev","all","pokemonCard","_pokemonData","color","textAling","onClick","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2a18e70d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Nav.css'\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <h1>Pokemon API</h1>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","export async function getAllPokemon(url) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                resolve(data)\r\n            })\r\n    })\r\n}\r\n\r\nexport async function getPokemon(url) {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                resolve(data)\r\n            })\r\n    })\r\n}","\r\nconst typeColors = {\r\n    bug: '#729f3f',\r\n    dragon: '#53a4cf',\r\n    fairy: '#fdb9e9',\r\n    fire: '#fd7d24',\r\n    ghost: '#7b62a3',\r\n    ground: '#f7de3f',\r\n    normal: '#a4acaf',\r\n    pyschic: '#f366b9',\r\n    steel: '#9eb7b',\r\n    dark: '#707070',\r\n    electric: '#eed535',\r\n    fighting: '#d56723',\r\n    flying: '#3dc7ef',\r\n    grass: '#9bcc50',\r\n    ice: '#51c4e7',\r\n    poison: '#b97fc9',\r\n    rock: '#a38c21',\r\n    water: '#4592c4'\r\n}\r\n\r\nexport default typeColors;","import React from 'react'\r\nimport './styles/poke.css'\r\nimport PokemonType from './helpers/PokemonTypes'\r\n\r\nfunction Pokemon({ pokemon }) {\r\n    return (\r\n        <div className='Card'>\r\n            <div className='Card-img'>\r\n                <img src={pokemon.sprites.front_default} alt=\"\" />\r\n            </div>\r\n\r\n            <div className='Card-name'>\r\n                {pokemon.name}\r\n            </div>\r\n\r\n            <div className='Card-types'>\r\n                {pokemon.types.map((type) => {\r\n                    return (\r\n                        <div className='Card-type' style={{ backgroundColor: PokemonType[type.type.name] }} >\r\n                            {type.type.name}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n            <div className='Card-info'>\r\n                <div className='Card-data Card-data-weight'>\r\n                    <p className='title'>Weight</p>\r\n                    <p>{pokemon.weight}</p>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className='Card-info'>\r\n                <div className='Card-data Card-data-height'>\r\n                    <p className='title'>Height</p>\r\n                    <p>{pokemon.height}</p>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className='Card-info'>\r\n                <div className='Card-data Card-data-ability'>\r\n                    <p className='title'>Ability</p>\r\n                    <p>{pokemon.abilities[0].ability.name}</p>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pokemon\r\n","import React, { useState, useEffect } from 'react'\nimport Navbar from './components/NavBar/Navbar'\nimport { getAllPokemon, getPokemon } from './components/PokeList'\nimport Pokemon from './components/Pokemon'\nimport './App.css'\n\nfunction App() {\n\n  const [pokemon, setPokemon] = useState([])\n  const [nextUrl, setNextUrl] = useState('')\n  const [prevUrl, setPrevUrl] = useState('')\n  const [loading, setLoading] = useState(true)\n  const initialUrl = 'https://pokeapi.co/api/v2/pokemon'\n\n  useEffect(() => {\n    async function fetchData() {\n      let response = await getAllPokemon(initialUrl)\n      setNextUrl(response.next)\n      setPrevUrl(response.previous)\n      let pokemon = await loadingPokemon(response.results)\n      console.log(pokemon)\n      setLoading(false)\n    }\n    fetchData()\n  }, [])\n\n  const next = async () => {\n    setLoading(true)\n    let data = await getAllPokemon(nextUrl)\n    await loadingPokemon(data.results)\n    setNextUrl(data.next)\n    setPrevUrl(data.previous)\n    setLoading(false)\n  }\n\n  const Prev = async () => {\n    if (!prevUrl) return\n    setLoading(true)\n    let data = await getAllPokemon(prevUrl)\n    await loadingPokemon(data.results)\n    setNextUrl(data.next)\n    setPrevUrl(data.previous)\n    setLoading(false)\n  }\n\n  const loadingPokemon = async (data) => {\n    let _pokemonData = await Promise.all(data.map(async pokemon => {\n      let pokemonCard = await getPokemon(pokemon.url)\n      return pokemonCard\n    }))\n\n    setPokemon(_pokemonData)\n  }\n\n  const LoadingStyle = {\n    color: '#fff',\n    textAling: 'center'\n  }\n\n  return (\n    <div>\n      {loading ? (\n        <h1 style={LoadingStyle}>Loading...</h1>\n      ) : (\n          <>\n            <Navbar />\n            <div className=\"btn\">\n              <button onClick={Prev}>Prev</button>\n              <button onClick={next}>Next</button>\n            </div>\n            <div className='grid-container'>\n              {pokemon.map((pokemon, i) => {\n                return <Pokemon key={i} pokemon={pokemon} />\n              })}\n            </div>\n\n            <div className=\"btn\">\n              <button onClick={Prev}>Prev</button>\n              <button onClick={next}>Next</button>\n            </div>\n\n          </>\n        )}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}